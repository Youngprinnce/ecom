definitions:
  types.CartCheckoutItem:
    properties:
      productID:
        type: integer
      quantity:
        type: integer
    type: object
  types.CartCheckoutPayload:
    properties:
      items:
        items:
          $ref: '#/definitions/types.CartCheckoutItem'
        type: array
    required:
    - items
    type: object
  types.CreateProductPayload:
    properties:
      description:
        type: string
      image:
        type: string
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    required:
    - name
    - price
    - quantity
    type: object
  types.LoginUserPayload:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  types.Order:
    properties:
      address:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      status:
        type: string
      total:
        type: number
      userID:
        type: integer
    type: object
  types.Product:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      price:
        type: number
      quantity:
        description: |-
          note that this isn't the best way to handle quantity
          because it's not atomic (in ACID), but it's good enough for this example
        type: integer
    type: object
  types.RegisterUserPayload:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        minLength: 8
        type: string
      role:
        enum:
        - admin
        - user
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    type: object
  types.UpdateOrderStatusPayload:
    properties:
      status:
        enum:
        - pending
        - successful
        - cancelled
        type: string
    required:
    - status
    type: object
  types.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      role:
        description: Added role field
        type: string
    type: object
info:
  contact: {}
paths:
  /orders:
    get:
      description: Get all orders for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: list of orders
          schema:
            items:
              $ref: '#/definitions/types.Order'
            type: array
        "401":
          description: unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order with the items in the cart
      parameters:
      - description: Cart checkout payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.CartCheckoutPayload'
      produces:
      - application/json
      responses:
        "200":
          description: orderID and totalPrice
          schema:
            additionalProperties: true
            type: object
        "400":
          description: invalid request payload
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    delete:
      description: Cancel an order if it is still in the "pending" status
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: no content
        "400":
          description: invalid order ID or order not pending
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Cancel an order
      tags:
      - orders
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order (admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order status payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.UpdateOrderStatusPayload'
      produces:
      - application/json
      responses:
        "200":
          description: status updated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: invalid order ID or payload
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Update order status
      tags:
      - orders
  /products:
    get:
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: list of products
          schema:
            items:
              $ref: '#/definitions/types.Product'
            type: array
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product (admin only)
      parameters:
      - description: Product payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.CreateProductPayload'
      produces:
      - application/json
      responses:
        "201":
          description: created product
          schema:
            $ref: '#/definitions/types.CreateProductPayload'
        "400":
          description: invalid request payload
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete a product (admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: no content
        "400":
          description: invalid product ID
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product (admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.CreateProductPayload'
      produces:
      - application/json
      responses:
        "200":
          description: updated product
          schema:
            $ref: '#/definitions/types.Product'
        "400":
          description: invalid product ID or payload
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - products
  /users/{userID}:
    get:
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: user details
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.LoginUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: invalid payload
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: invalid email or password
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Register payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: user created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: invalid payload
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: user already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register
      tags:
      - users
swagger: "2.0"
